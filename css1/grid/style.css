/*? CSS Grid Layout, often referred to simply as Grid, is a two-dimensional layout system in CSS that allows you to design complex web layouts with rows and columns. It provides a highly flexible and precise way to arrange and align content on a webpage.  */

/*? 1:Two-Dimensional Grid: */

/* Unlike traditional layout models, such as the box model and Flexbox, CSS Grid is a two-dimensional layout system. It simultaneously manages both rows and columns. */

/*? 2: Grid Container and Grid Items: */

/* A grid layout consists of a grid container and its grid items. */
/* The grid container is an element that contains grid items. It's often an immediate parent element. */
/* Grid items are the children of the grid container, and they are positioned within the grid. */

/*? 3: Defining the Grid: */

/* To create a grid, you first define the columns and rows. */
/* Use the grid-template-columns and grid-template-rows properties to set the sizes and structure of the grid. */
/* Columns and rows can be specified as fixed sizes (e.g., pixels) or flexible sizes (e.g., percentages, fractions). */

/*? 4: Grid Lines and Tracks: */

/* Grid lines are the dividing lines between columns and rows. */
/* Tracks are the spaces between grid lines where content can be placed. */
/* You can name grid lines and tracks for better organization. */

/*? 5. Placing Grid Items: */

/* Grid items are placed within the grid using the grid-column and grid-row properties. */
/* You can also use the shorthand property grid-area to specify both column and row placement in a single declaration. */

/*? The grid-area property specifies a grid item's size and location in a grid layout, and is a shorthand property for the following properties:

grid-row-start
grid-column-start
grid-row-end
grid-column-end */

/*? Explicit vs Implicit grid  */

/*? 6. Grid Gaps: */     

/* Grid gaps are the spaces between grid items and tracks. */
/* You can control gaps between columns and rows separately using the grid-column-gap and grid-row-gap properties or the shorthand grid-gap. */ 

/*! This property is a shorthand for the following CSS properties: The gap CSS shorthand property sets the gaps (gutters) between rows and columns. */

/* column-gap */
/* row-gap */
/* gap */

/*? 7. Grid Auto: */

/* Grid items can be automatically placed using grid-auto-flow. By default, they fill rows, but you can change this behavior to fill columns. */
/* grid-auto-rows and grid-auto-columns control the size of automatically placed items. */

/*? 8. Responsive Grids: */

/* CSS Grid is highly responsive. Grid items can be repositioned and resized automatically as the viewport size changes. */
/* Use media queries to adjust grid layouts for different screen sizes. */

/*? 9. Alignment and Justification: */

/* You can align and justify content within grid items and the grid container itself. */
/* Properties like justify-items, align-items, justify-content, and align-content help you control alignment and spacing. */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Jost";
}

body {
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #2c3639;
}

 .grid-container {
  background-color: rgb(196, 196, 218);
  width: 80%;
  margin: 100px auto;
  padding: 1rem;
  box-shadow: 0px 0px 10px;
  /* grid starts here */

  display: grid;
  /* grid-template-rows: 250px 250px; */
  grid-template-rows: repeat(2,250px);
  grid-auto-rows: 100px;

  /* grid-template-columns: 250px 250px 250px; */
  /* grid-template-columns: 250px 250px 1fr; */
  /* grid-template-columns: 1fr 1fr 1fr; */
  /* grid-template-columns: repeat(3, 1fr); */

  /* grid-template-columns: 1fr min-content repeat(1, 1fr); */
  /* grid-template-columns: max-content 1fr; /*or repeat(1, 1fr)*\ ;   */
  /* grid-template-columns: 1fr minmax(100px, 200px) repeat(1, 1fr); */
  /* grid-template-columns: repeat(auto-fit , minmax(200px, 1fr)); */
  /* grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); */
  grid-template-columns: repeat(3, minmax(200px, 1fr));
  

  /*? gaps  */

  /* grid-row-gap: 1rem;
  grid-column-gap: 1rem; */
  /* grid-gap: 1rem; */
  /* row-gap: 1rem;
  column-gap: 1rem; */
  gap: 1rem;

  /*? align vertically */

  /* align-items: start; */
  /* align-items: end; */
     /* align-items: center; */
  align-items: stretch;

  /*? justify horizontilly  */

  /* justify-items: start;
  justify-items: end; */
  /* justify-items: center;  */
  justify-items: stretch;
}

@media (width < 830px) {
  .grid-container {
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  }
}

.item {
  display: grid;
  place-items: center;
  text-transform: uppercase;
  border: 1px solid black;
  box-shadow: 0px 4px  10px;
}
.item-1{
  background-color: #2c3;
  /* grid-column-start:2;
  grid-column-end: 3; */
  /* grid-column: 2 / 3; */
  /* grid-row-start: 2;
  grid-row-end: 3; */
  /* grid-row: 2 / 3; */
  /* grid-area: 2 / 2 / 3 / 3 ; */
}

.item-2 {
  background-color: #3ce;
  /* grid-row: 1/2;
  grid-column: 3/4; */
  /* grid-area: 1/3/2/4; */
}

.item-3{
  background-color: rgb(0, 247, 193);
}

.item-4{
  background-color: #ccc;
}

.item-5{
  background-color: #ffccee;
  /* grid-column-start: 1;
  grid-column-end: 2; */
  grid-row-start: 1;
  grid-row-end: 2;
}

.item-6 {
  background-color: rgba(240, 32, 146, 0.945);
}